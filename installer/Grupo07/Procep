#!/bin/bash

CENTROS=$DIRMAE"/centros.csv"
TRIMESTRES=$DIRMAE"/trimestres.csv"
ACTIVIDADES=$DIRMAE"/actividades.csv"
PROVINCIAS=$DIRMAE"/provincias.csv"

PROCESADOS=$DIRPROC"/proc"

variables_ambiente=(GRUPO DIRBIN DIRMAE DIRREC DIROK DIRPROC DIRINFO DIRLOG)
directorios_necesarios=(DIRMAE DIROK DIRNOK DIRLOG DIRPROC DIRBIN)
directorios_lectura=(DIRMAE DIROK)
directorios_escritura=(DIRNOK DIRLOG DIRPROC)
directorios_ejecucion=(DIRBIN)
archivos_necesarios=(LOGEP MOVEP ACTIVIDADES CENTROS PROVINCIAS TRIMESTRES)
archivos_lectura=(CENTROS PROVINCIAS TRIMESTRES ACTIVIDADES)
archivos_ejecucion=(LOGEP MOVEP)

comando="Procep"

centrosValidos=""
trimestresValidos=""
actividadesValidas=""
provinciasValidas=""

function verificar_variables_ambiente(){
  for elem in "${variables_ambiente[@]}"
  do
    if [ -z ${!elem} ]; then      
      echo "ERROR: No existe la variable de ambiente: \"${elem}\"."
      exit 1;
    fi  
  done
}

function verificar_existencia_directorios(){
  for elem in "${directorios_necesarios[@]}"
  do
    if [ ! -d ${!elem} ]; then      
      echo "ERROR: No existe el directorio: \"${!elem}\"."
      exit 2;
    fi  
  done
}

function verificar_directorios_lectura(){
  for elem in "${directorios_lectura[@]}"
  do
    if [ ! -r ${!elem} ]; then      
      echo "ERROR: No existen permisos de lectura en directorio: \"${!elem}\"."
      exit 3;
    fi  
  done
}

function verificar_directorios_escritura(){
  for elem in "${directorios_escritura[@]}"
  do
    if [ ! -w ${!elem} ]; then      
      echo "ERROR: No existen permisos de escritura en directorio: \"${!elem}\"."
      exit 4;
    fi  
  done
}

function verificar_directorios_ejecucion(){
  for elem in "${directorios_ejecucion[@]}"
  do
    if [ ! -x ${!elem} ]; then      
      echo "ERROR: No existen permisos de ejecucion en directorio: \"${!elem}\"."
      exit 5;
    fi  
  done
}

function verificar_existencia_archivos(){
  for elem in "${archivos_necesarios[@]}"
  do
    if [ ! -e ${!elem} ]; then      
      echo "ERROR: No existe el archivo: \"${!elem}\"."
      exit 6;
    fi  
  done
}

function verificar_archivos_lectura(){
  for elem in "${archivos_lectura[@]}"
  do
    if [ ! -r ${!elem} ]; then      
      echo "ERROR: No se cuentan con permisos de lectura para el archivo: \"${!elem}\"."
      exit 7;
    fi  
  done
}

function verificar_archivos_ejecucion(){
  for elem in "${archivos_ejecucion[@]}"
  do
    if [ ! -x ${!elem} ]; then      
      echo "ERROR: No se cuentan con permisos de ejecucion para el archivo: \"${!elem}\"."
      exit 8;
    fi  
  done
}

function verificar_ambiente(){
  verificar_variables_ambiente
  verificar_existencia_directorios
  verificar_directorios_lectura
  verificar_directorios_escritura
  verificar_directorios_ejecucion
  verificar_existencia_archivos
  verificar_archivos_lectura
  verificar_archivos_ejecucion
}

function inicializar_maestros(){
	centrosValidos=$(<$CENTROS)
	actividadesValidas=$(<$ACTIVIDADES)
	trimestresValidos=$(<$TRIMESTRES)
	provinciasValidas=$(<$PROVINCIAS)
}

function obtener_cantidad_archivos_a_procesar(){
	ubicacion=$PWD 	
 	cd $DIROK
 	local cant="$(ls -U -1 | wc -l)"
 	log $comando "Cantidad de archivos a procesar: $cant"
 	cd $ubicacion
}

function verificar_archivo_duplicado(){
	ubicacion=$PWD
	archivo=$1
	cd $PROCESADOS
	if [ -f "$archivo" ]; then
		log $comando "Archivo Duplicado. Se rechaza el archivo $archivo"
		cd $ubicacion
		return 1
	else
		cd $ubicacion
		return 0
	fi
}

function verificar_formato(){
	archivo=$1
	local cant_campos=$(head -1 $archivo | sed 's/[^;]//g' | wc -c)
	if [ "$cant_campos" -eq 6 ]; then
		return 0
	else
		log $comando "Estructura inesperada. Se rechaza el archivo $archivo"
		return 1
	fi
}

function anio(){
  echo "$1" | cut -d'_' -f 2
}

function fecha(){
  echo "$1" | awk -F '[_.]' '{print $4}'
}

function provincia(){
  echo "$1" | cut -d'_' -f 3
}

function cambiar_formato_fecha(){
	fecha_vieja=$1 #dd/mm/aaaa
	local dia=$(echo "$1" | cut -d'/' -f1)
	local mes=$(echo "$1" | cut -d'/' -f2)
	local anio=$(echo "$1" | cut -d'/' -f3)
	echo "$anio$mes$dia"
}

function validar_formato_fecha(){
	re1='^[0-9]{4}[0][1-9][0][1-9]$'
	re2='^[0-9]{4}[0][1-9][1-2][0-9]$'
	re3='^[0-9]{4}[1][0-2][0][1-9]$'
	re4='^[0-9]{4}[1][0-2][1-2][0-9]$'
	re5='^[0-9]{4}[0][13-9][3][0]$'
	re6='^[0-9]{4}[1][0-2][3][0]$'
	re7='^[0-9]{4}[0][13578][3][1]$'
	re8='^[0-9]{4}[1][02][3][1]$'

	re="($re1)|($re2)|($re3)|($re4)|($re5)|($re6)|($re7)|($re8)"
	if ! [[ $1 =~ $re ]] ; then
		return 1
	else
		return 0
	fi	
}

function verificar_fecha_en_trimestre(){
	local nom_trim="$2"
	local reg_trim=$(echo "$trimestresValidos" | awk -F\; -v nom="$nom_trim" '$2==nom')
	if [ "$reg_trim" != "" ]; then
		local fecha_inicio=$(echo "$reg_trim" | cut -d\; -f3 )
		fecha_inicio=$(cambiar_formato_fecha "$fecha_inicio")
		local fecha_fin=$(echo "$reg_trim" | cut -d\; -f4 )
		fecha_fin=$(cambiar_formato_fecha "$fecha_fin")
		if [ "$1" \< "$fecha_inicio" ] || [ "$1" \> "$fecha_fin" ]; then
			return 1
		else
			return 0
		fi
	fi
	return 1
}

function obtener_nombre_centro(){
	local cod_centro="$1"
	echo "$centrosValidos" | awk -F\; -v cod="$cod_centro" '$1==cod' | cut -d\; -f2
}

function obtener_codigo_actividad(){
	local nom_act="$1"
	echo "$actividadesValidas" | awk -F\; -v nom="$nom_act" '$4==nom' | cut -d\; -f1	
}

function obtener_nombre_provincia(){
	local cod_prov="$1"
	echo "$provinciasValidas" | awk -F\; -v cod="$cod_prov" '$1==cod' | cut -d\; -f2
}

function validar_centro(){
	local cod_centro=$(echo "$1" | sed 's/ //g')
	local reg_centro=$(echo "$centrosValidos" | awk -F\; -v cod="$cod_centro" '$1==cod')
	if [ "$reg_centro" == "" ]; then
		echo 1
		log $comando "En el registro $2 el centro de presupuestos $1 no existe en el maestro"
	else 
		echo 0
	fi
}

function validar_actividad(){
	local nom_act="$1"
	local reg_act=$(echo "$actividadesValidas" | awk -F\; -v nom="$nom_act" '$4==nom')
	if [ "$reg_act" == "" ]; then
		echo 1
		log $comando "En el registro $2 la actividad $1 no existe en el maestro"
	else 
		echo 0
	fi
}

function validar_trimestre(){
	local nom_trim="$1"
	local anio_presup="$2"
	local reg_trim=$(echo "$trimestresValidos" | awk -F\; -v nom="$nom_trim" '$2==nom')
	if [ "$reg_trim" == "" ]; then
		echo 1
		log $comando "En el registro $3 el trimestre $1 no existe en el maestro"
	else
		local anio_trim=$(echo "$reg_trim" | cut -d\; -f1 )
		if [ "$anio_trim" != "$anio_presup" ]; then
			log $comando "En el registro $3 el año $anio_trim del trimestre $1 no se corresponde con el año presupuestario $2"
			echo 2
		else
			echo 0
		fi
	fi
}

#$1 es la fecha a validar, $2 es la fecha del nombre del archivo, $3 es el trimestre y $4 el registro que estamos procesando
function validar_fecha(){
	validar_formato_fecha "$1"
	if [ $? == 1 ]; then
		log $comando "En el registro $4 la fecha $1 no es una fecha valida (aaaammdd)"
		echo 1
		return 0
	fi
	if [ $1 \> $2 ]; then #ver formato fecha_presup
		log $comando "En el registro $4 la fecha $1 es mayor a la fecha del nombre del archivo $2"
		echo 2
		return 0	
	fi
	verificar_fecha_en_trimestre "$1" "$3"
	if [ $? == 1 ]; then
		log $comando "En el registro $4 la fecha $1 no está comprendida entre las fechas de inicio y fin del trimestre $3"
		echo 3
		return 0
	fi
	echo 0
}

function validar_gasto(){
	re1='^[0]*[1-9]+[0-9]*([,][0-9]+)?$' #Numero flotante con parte entera distinta a 0
	re2='^[0]+[,][0]*[1-9]+[0-9]*$' #Numero flotante con parte entera igual a 0 y parte decimal mayor a 0
	re="($re1)|($re2)"
	if ! [[ $1 =~ $re ]] ; then
		log $comando "En el registro $2 el gasto $1 no es un numero mayor a cero"
		echo 1
		return 0
	else
		echo 0
		return 0
	fi
}

function obtener_motivo(){
	motivo=""
	if [ $1 == 1 ]; then
		motivo+="Centro inexistente. "
	fi
	if [ $2 == 1 ]; then
		motivo+="Actividad inexistente. "
	fi
	if [ $3 != 0 ]; then
		motivo+="Trimestre invalido. "
	fi
	if [ $4 == 1 ] || [ $4 == 2 ]; then
		motivo+="Fecha invalida. "
	else
		if [ $4 == 3 ]; then
			motivo+="La fecha no se corresponde con el trimestre. "
		fi
	fi
	if [ $5 == 1 ]; then
		motivo+="Importe invalido."
	fi
	echo "$motivo"
}

function crear_ejecutado(){
	touch "$1"
	echo "id;Fecha;Centro de Presupuesto;Actividad;Trimestre;Gasto;Archivo Origen;COD_ACT;NOM_PROV;NOM_CEN">> "$1"
}

function crear_rechazado(){
	touch "$1"
	echo "Fuente;Motivo;Registro de Oferta;usuario;fecha" >> "$1"
}

function registro_valido(){
	ubicacion=$PWD
	cd $DIRPROC
	local cod_centro=$(echo "$1" | cut -d\; -f3)
	local nom_act=$(echo "$1" | cut -d\; -f4)
	local nom_centro=$(obtener_nombre_centro "$cod_centro")
	local cod_act=$(obtener_codigo_actividad "$nom_act")
	local nom_prov=$(obtener_nombre_provincia "$4")
	local reg_valido="$1;$2;$cod_act;$nom_prov;$nom_centro"
	local filename="ejecutado-$3.csv"
	if ! [ -f "$filename" ]; then
		crear_ejecutado $filename
	fi
	echo "$reg_valido" >> $filename
	cd $ubicacion
}

function registro_rechazado(){
	ubicacion=$PWD
	cd $DIRPROC
	local fecha_hora=$(date +%Y%m%d%H%M%S)
	local reg_trans=$(sed "s/;/,/g" <<< "$1")
	local reg_rechazado="$2;$4;$reg_trans;USER;$fecha_hora" #MODIFICAR POR USUARIO
	local filename="rechazado-$3.csv"
	if ! [ -f "$filename" ]; then
		crear_rechazado $filename
	fi
	echo "$reg_rechazado" >> $filename
	cd $ubicacion
}

function procesar_archivo(){
	archivo=$1
	log $comando "Archivo a procesar: $archivo"
	anio_presup=$(anio "$archivo")
	fecha_presup=$(fecha "$archivo")
	cod_prov=$(provincia "$archivo")
	regs_validados=0
	regs_rechazados=0
	while IFS=";", read regID fecha centro actividad trimestre gasto
	do
    	registro="$regID;$fecha;$centro;$actividad;$trimestre;$gasto"
    	ok_centro=$(validar_centro "$centro" "$registro")
    	ok_actividad=$(validar_actividad "$actividad" "$registro")
		ok_trimestre=$(validar_trimestre "$trimestre" "$anio_presup" "$registro")
		ok_fecha=$(validar_fecha "$fecha" "$fecha_presup" "$trimestre" "$registro")
		ok_gasto=$(validar_gasto "$gasto" "$registro")
		if [ "$ok_centro" -eq 0 ] && [ "$ok_actividad" -eq 0 ] && [ "$ok_trimestre" -eq 0 ] && [ "$ok_fecha" -eq 0 ] && [ "$ok_gasto" -eq 0 ]; then 
			registro_valido "$registro" "$archivo" "$anio_presup" "$cod_prov"
			((regs_validados++))
		else
			motivo=$(obtener_motivo $ok_centro $ok_actividad $ok_trimestre $ok_fecha $ok_gasto)
			registro_rechazado "$registro" "$archivo" "$anio_presup" "$motivo"
			((regs_rechazados++))
		fi
	done < <(tail -n +2 "$archivo")
	regs_totales=$((regs_validados+regs_rechazados))
	log $comando "Fin de proceso: $archivo"
	log $comando "Registros totales: $regs_totales - Registros validados: $regs_validados - Registros rechazados: $regs_rechazados"
}

function mover(){
	ubicacion=$PWD
	cd $DIRBIN
	./Movep "$1" "$2"
	cd $ubicacion
}

function log(){
	ubicacion=$PWD
	cd $DIRBIN
	./Logep $1 "$2"
	cd $ubicacion
}

function main(){
	ubicacion=$PWD
	cd $GRUPO
	#Punto 1 OBLIGACIÓN DE INICIAR AMBIENTE ANTES DE EJECUTAR CUALQUIER COMANDO
	verificar_ambiente
	inicializar_maestros
	#Punto 2 PROCESAR TODOS LOS ARCHIVOS
	obtener_cantidad_archivos_a_procesar
	cd $DIROK
	for archivo in *
	do
		#Punto 3 ANTES DE PROCESAR UN ARCHIVO, VERIFICAR QUE NO ESTA DUPLICADO
		verificar_archivo_duplicado "$archivo"
		if [ $? == 1 ]; then
			mover $DIROK/$archivo $DIRNOK
			continue
		fi
		#Punto 4 ANTES DE PROCESAR UN ARCHIVO, VERIFICAR EL FORMATO
		verificar_formato "$archivo"
		if [ $? == 1 ]; then
			mover $DIROK/$archivo $DIRNOK
			continue
		fi
		procesar_archivo "$archivo"
		mover $DIROK/$archivo $PROCESADOS
	done
	cd $ubicacion
}

main